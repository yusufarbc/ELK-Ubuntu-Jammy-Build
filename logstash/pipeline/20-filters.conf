#############################
# Logstash filters (ECS-friendly) - improved
#############################

# Grok patterns and JSON/KV parsing for multiple vendors (Cisco ASA, FortiGate, Kaspersky)
filter {
  ########################################
  # Windows / beats (structured)
  ########################################
  if [@metadata][beat] == "winlogbeat" or [event][module] == "windows" or [type] == "windows" {
    mutate { add_field => { "event.module" => "windows" } }
    if [winlog] and [winlog][event_id] {
      mutate { rename => { "[winlog][event_id]" => "[event][code]" } }
    }
  }

  ########################################
  # Generic syslog parsing (RFC3164/5424-ish)
  ########################################
  if [type] == "syslog" {
    grok {
      match => { "message" => [
        "<%{NUMBER:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{HOSTNAME:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}",
        "%{SYSLOGTIMESTAMP:syslog_timestamp} %{HOSTNAME:syslog_hostname} %{DATA:syslog_program}: %{GREEDYDATA:syslog_message}",
        "%{GREEDYDATA:syslog_message}"
      ] }
      tag_on_failure => ["_grok_syslog_failure"]
      remove_field => ["message"]
    }
    date { match => ["syslog_timestamp","MMM dd HH:mm:ss","MMM  d HH:mm:ss","ISO8601"] timezone => "UTC" }
    mutate { rename => { "syslog_hostname" => "host.name" } }
  }

  ########################################
  # Cisco ASA specific (attempt to extract common fields)
  ########################################
  if "ASA" in [syslog_program] or [message] =~ /%ASA-/ {
    grok {
      match => { "message" => [
        "%{DATA:asa.tag}: Built %{WORD:asa.direction} %{WORD:network.transport} connection %{INT:asa_conn_id} for (?:%{DATA:asa_iniface}:)?%{IP:source.ip}/%{INT:source.port} to (?:%{DATA:asa_outiface}:)?%{IP:destination.ip}/%{INT:destination.port}",
        "%{DATA:asa.tag}: %{GREEDYDATA:asa_msg}"
      ] }
      tag_on_failure => ["_grok_asa_failure"]
    }
    mutate { add_field => { "event.dataset" => "cisco.asa" "event.module" => "cisco_asa" } }
  }

  ########################################
  # FortiGate common pattern (key=value parsing)
  ########################################
  if [message] =~ /(?:action=|srcip=|dstip=)/ {
    kv {
      source => "message"
      field_split => "\s+"
      value_split => "="
      trim_key => "\s"
      trim_value => "\s\"\'"
      include_brackets => false
    }
    mutate {
      rename => { "srcip" => "source.ip" "srcport" => "source.port" "dstip" => "destination.ip" "dstport" => "destination.port" }
      add_field => { "event.module" => "fortigate" "event.dataset" => "fortigate.firewall" }
    }
    # Numeric normalization for FortiGate fields
    if [source][port] {
      mutate { convert => { "[source][port]" => "integer" } }
    }
    if [destination][port] {
      mutate { convert => { "[destination][port]" => "integer" } }
    }
    if [duration] {
      mutate { convert => { "duration" => "integer" } }
    }
    # Map proto to network.transport (proto may be numeric)
    if [proto] {
      mutate { add_field => { "[network][transport]" => "%{proto}" } }
    }
  }

  ########################################
  # Kaspersky (KSC) handling: JSON preferred, else KV
  ########################################
  # Prefer JSON parse when message begins with {
  if [message] =~ /^\s*\{/ {
    json {
      source => "message"
      target => "kaspersky"
      skip_on_invalid_json => true
    }
    if [kaspersky] {
      # Map common fields into ECS-like names
      if [kaspersky][ComputerName] { mutate { rename => { "[kaspersky][ComputerName]" => "[host][name]" } } }
      if [kaspersky][ThreatName]  { mutate { rename => { "[kaspersky][ThreatName]" => "[threat][name]" } } }
      if [kaspersky][ThreatSeverity] { mutate { rename => { "[kaspersky][ThreatSeverity]" => "[threat][severity]" } } }
      if [kaspersky][SourceIP] { mutate { rename => { "[kaspersky][SourceIP]" => "[source][ip]" } } }
      if [kaspersky][User] { mutate { rename => { "[kaspersky][User]" => "[user][name]" } } }
      # Timestamp normalization if present
      if [kaspersky][Timestamp] {
        date { match => ["[kaspersky][Timestamp]","ISO8601","yyyy-MM-dd'T'HH:mm:ssZ","yyyy-MM-dd HH:mm:ss"] target => "@timestamp" }
      }
      mutate { add_field => { "event.module" => "kaspersky" "event.dataset" => "kaspersky.av" } }
      mutate { add_tag => ["parsed_kaspersky"] }
    }
  } else {
    # fallback to kv parsing for key=value formatted messages
    if [message] =~ /kaspersky|Kaspersky|ThreatName|threat/ {
      kv {
        source => "message"
        field_split => ";|,|\s+"
        value_split => "="
        trim_key => "\s"
        trim_value => "\s\"\'"
      }
      if [ThreatName] { mutate { rename => { "ThreatName" => "[threat][name]" } } }
      if [ThreatSeverity] { mutate { rename => { "ThreatSeverity" => "[threat][severity]" } } }
      if [ComputerName] { mutate { rename => { "ComputerName" => "[host][name]" } } }
      if [SourceIP] { mutate { rename => { "SourceIP" => "[source][ip]" } } }
      mutate { add_field => { "event.module" => "kaspersky" "event.dataset" => "kaspersky.av" } }
      mutate { add_tag => ["parsed_kaspersky"] }
    }
  }

  ########################################
  # Normalize types and perform light ECS conversions
  ########################################
  # Convert ports to integer where possible
  if [source][port] {
    mutate { convert => { "[source][port]" => "integer" } }
  }
  if [destination][port] {
    mutate { convert => { "[destination][port]" => "integer" } }
  }

  # Promote threat severity to standard field name if present
  if [threat][severity] {
    mutate { rename => { "[threat][severity]" => "threat.severity" } }
  }

  # Tag messages that failed grok for later inspection
  if "_grok_syslog_failure" in [tags] or "_grok_asa_failure" in [tags] or "_grok_asa_conn_failure" in [tags] {
    mutate { add_tag => ["needs_debug"] }
  }

  # Remove large intermediate fields to reduce event size
  if [kaspersky] {
    mutate { remove_field => ["kaspersky"] }
  }

}
